#!/bin/bash

default_meross_ha_component="homeassistant/custom_components/meross_mqtt/meross_iot"
default_mosquitto_share_folder="share/mosquitto"
default_mosquitto_data_folder="addons/data/local_mosquitto"


function discover(){
    local appliance=$1
    sudo nmcli connection add type wifi ssid $appliance con-name  $appliance || { echo "failed to add wifi connection" >&2; return; }
    sleep 2
    sudo nmcli connection up ifname wlan0 ap $appliance || { echo "failed to activate wifi connection to $appliance" >&2; return; }
    sleep 2
    ./meross_discovery register ${device} --config "$config_path"

    sudo nmcli connection down $appliance || { echo "failed to disconnect from $appliance" >&2; return; }
    sleep 2
    sudo nmcli connection delete $appliance
}

function find_hassio_data_path() {
  local hassio_locations=($(whereis hassio))
  hassio_locations=${hassio_locations[@]:1}
  local hassio_data_path=""
  for location in ${hassio_locations[@]}
  do
    [[ $location = */hassio.json ]] && echo "$(jq --raw-output '.data' $location)" && break
    [[ $location = */hassio ]] && echo "$location" && break
  done
}

function get_config_path(){
  local config_path=$1
  local hassio_data_path=""

  if [ -z $config_path ];
  then 
    hassio_data_path=$(find_hassio_data_path)
    config_path="${hassio_data_path}/${default_meross_ha_component}/config.yaml"
  fi

  if [ ! -f "$config_path" ];
  then
    touch "$config_path"
  fi
  
  echo "$config_path"
}

function write_variable_to_yaml(){
  local key_name=$1
  local value=$2
  local yaml_path=$3
  
  local level_up_object_line=1
  local leading_blanks=""
  local keys=($(echo $key_name | tr "." "\n"))

  #I assume that 
  for i in ${!keys[@]}
  do
    [ $i -gt 0 ] && leading_blanks=$(printf ' %.0s' $(eval "echo {1.."$(($((2*$i))))"}"))
    if [ $(($i+1)) == ${#keys[@]} ];
    then
      #last key, delete current entry corresponding to the key 
      sed -i -e "$level_up_object_line,/${leading_blanks}${keys[i]}:.*/{ /${leading_blanks}${keys[i]}:.*/d }" $yaml_path
      #append an entry with a new value
      sed -i "${level_up_object_line}a\\${leading_blanks}${keys[i]}: $value" $yaml_path
      break
    fi
    object_line=$(sed -n -e "$level_up_object_line,/${leading_blanks}${keys[i]}:[[:blank:]]*/{ /${leading_blanks}${keys[i]}[[:blank:]]*:/= }" $yaml_path)

    if [ -z "$object_line" ]; then
      #add a comment line to the yaml if it's empty: otherwise sed won't append anything to the file
      [ -z "$(cat $yaml_path)" ] && echo "#Generated by meross discovery tool" >> $yaml_path
      sed -i "${level_up_object_line}a\\${leading_blanks}${keys[i]}:" $yaml_path
      level_up_object_line=$(("$level_up_object_line"+1))
    else
      level_up_object_line="$object_line"
    fi
  done
}


function write_variable_to_yaml2(){
  local yaml_path=$3
  local value=$2
  local key_name=$1
  
  local level_up_object_line=1
  local leading_blanks=""
  local keys=($(echo $key_name | tr "." "\n"))

   sed_cmd=""
   blanks=""
   closing_brakets=""
   #scip the last two
  for key in ${keys[@]:2:} 
  do
    sed_cmd="${sed_cmd}/${blanks}${key}:,\${"
    blanks="${blanks}  "
    closing_brakets="$closing_brakets}"
  done

  sed -e '/mosquitto:/,${/  level2:/,${/    app:/a \ \ \ \ \ \ key3: lll
}}' configuration.yaml
  sed -e "${sed_cmd}/${blanks}  ${keys[-2]}:/a\\${blanks}    ${keys[-1]}: $value
  $closing_brakets" configuration.yaml
}

function fill_default_values(){
  local config_path=$1
  [ -z "${hassio_installation_folder}" ] && write_variable_to_yaml "hassio_installation_folder" $(find_hassio_data_path) $config_path
  [ -z "${mosquitto_share_folder}" ] && write_variable_to_yaml "mosquitto.share_folder" ${default_mosquitto_share_folder} $config_path
  [ -z "${mosquitto_data_folder}" ] && write_variable_to_yaml "mosquitto.data_folder" ${default_mosquitto_data_folder} $config_path
  [ -z "${meross_ha_component}"] && write_variable_to_yaml "meross.ha_component" ${default_meross_ha_component} $config_path
}

function parse_yaml {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

function evaluate_var_value() {
  local var_name=$1
  local var_name_human=$2
  local var_value=""
  local bash_var_rex="^[[:alpha:]_]+[[:alnum:]_]*$"
  
  [ -z "$var_name" ] && echo "evaluate_var_value must receive at least 1 argument: the valiable name, second optional paremeter is user friendly name of the variable" >&2 && exit 1
  [[ ! "$var_name" =~ $bash_var_rex ]] && echo "evaluate_var_value name must be a legitimate bash variable name" >&2 && exit 1
  
  var_value=${!var_name}

  [ -z "$var_name_human" ] && var_name_human="${var_name//"_"/" "}"

  [ -z "$var_value" ] && read -p "${var_name_human}: " var_value

  echo $var_value
  
}

meross_devices=($(nmcli dev wifi list --rescan yes | grep "Meross" | awk '{print $2}'))
config_path=$(get_config_path $1)
fill_default_values "$config_path"
eval $(parse_yaml "$config_path")


if [ ${#meross_devices[*]} -gt 0 ] 
then
  
  echo "Discovered devices: [${meross_devices[@]}]"  >&2 

  mosquitto_server=$(evaluate_var_value "mosquitto_server" "mosquitto broker address (ip or domain)")
  write_variable_to_yaml "mosquitto.server" "$mosquitto_server" "$config_path"
  mosquitto_port=$(evaluate_var_value "mosquitto_port" "mosquitto broker port")
  write_variable_to_yaml "mosquitto.port" "$mosquitto_port" "$config_path"

  for device in "${meross_devices[@]}" 
  do
    discover $device 
  done

else
  echo "No new devices were doscovered."  >&2 
fi
